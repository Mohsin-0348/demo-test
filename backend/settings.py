"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

from celery.schedules import crontab
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', None)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default=['localhost'], cast=lambda v: [s.strip() for s in v.split(',')])

DEFAULT_TIMEZONE = config('DEFAULT_TIMEZONE', default='UTC')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'graphene_django',
    'easy_thumbnails',
    'corsheaders',

    'users',
    'notifications',
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Custom auth user
AUTH_USER_MODEL = 'users.User'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config('DB_NAME', None),
        'USER': config('DB_USER', None),
        'PASSWORD': config('DB_PASSWORD', None),
        'HOST': config('DB_HOST', None),
        'PORT': config('DB_PORT', 5432, cast=int)
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = DEFAULT_TIMEZONE

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = []
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

# Media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

VAT_PERCENT = 0

# DB_PREFIX = 'w3gym'

ACCESS_TOKEN_TIMESTAMP = config('ACCESS_TOKEN_TIMESTAMP', default=5, cast=int)

REFRESH_TOKEN_TIMESTAMP = config('REFRESH_TOKEN_TIMESTAMP', default=24 * 60, cast=int)

PASSWORD_RESET_TIMESTAMP = config('PASSWORD_RESET_TIMESTAMP', default=5, cast=int)

OTP_TIMESTAMP = config('OTP_TIMESTAMP', default=2, cast=int)

DEFAULT_SEAT_LIMIT_FOR_CLASS = config('DEFAULT_SEAT_LIMIT_FOR_CLASS', default=10, cast=int)

DISCOUNT_USER_LIMIT = config('DISCOUNT_USER_LIMIT', default=1, cast=int)

DEFAULT_LATITUDE = config('DEFAULT_LATITUD', default=24.7632033, cast=float)

DEFAULT_LONGITUDE = config('DEFAULT_LONGITUD', default=90.3986301, cast=float)

DEFAULT_PASSWORD = config('DEFAULT_PASSWORD', None)

SITE_URL = config('SITE_URL', 'localhost')

# Cores origin
CORS_ORIGIN_WHITELIST = [
    "http://localhost:3000",
]
CORS_ORIGIN_ALLOW_ALL = True

DJANGO_ALLOW_ASYNC_UNSAFE = True

# graphene config
GRAPHENE = {
    'SCHEMA': 'backend.schema.schema',
    'MIDDLEWARE': [
        'backend.middlewares.W3AuthMiddleware'
    ]
}

# firebase config
FIREBASE_CONFIG_PATH = "firebase.json"
FCM_URL = "https://fcm.googleapis.com/fcm/send"
FCM_KEY = "AAAAXX_dlHU:APA91bEQqQQa0Z3wFviwN6LpoyhORGLB9DdfQQdoPcmqc7aaSH8sZJPFczaUOnHmgbqDz_S7OqxQmtS6OWPK92LaiMANDEcioMAWD2gtO5Sx59-SM1oXZy193U5AQcJcGhzlX5wFdsJs"

# mail config
SENDGRID_API_KEY = config('SENDGRID_API_KEY', None)
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = config('EMAIL_HOST_USER', None)
EMAIL_PORT = 587
EMAIL_HOST_PASSWORD = SENDGRID_API_KEY
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', 'W3Gym <w3gym.info@gmail.com>')
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# CELERY STUFF
# Celery Config
BROKER_URL = 'redis://localhost:6379'
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = DEFAULT_TIMEZONE
CELERYBEAT_SCHEDULE = {
    'send_scheduled_notifications': {
        'task': 'notifications.tasks.send_scheduled_notifications',
        'schedule': crontab(minute="*/1"),  # checks every minute
    },
    'send_class_scheduled_notifications': {
        'task': 'notifications.tasks.send_class_scheduled_notifications',
        'schedule': crontab(minute="*/1"),  # checks every minute
    },
}
